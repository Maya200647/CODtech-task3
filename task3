import nltk
import random
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Download required NLTK data
nltk.download('punkt')
nltk.download('wordnet')

# Sample chatbot corpus
corpus = """
Hello! How can I assist you?
I am a chatbot built using Python and NLP.
You can ask me about programming, Python, or general topics.
Python is a popular programming language.
Natural Language Processing allows computers to understand human language.
NLTK is a powerful NLP library in Python.
How are you doing today?
I can answer your questions related to basic concepts.
You can also say bye to exit.
"""

# Preprocessing
sent_tokens = nltk.sent_tokenize(corpus)  # Convert corpus to list of sentences

lemmer = nltk.stem.WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token.lower()) for token in tokens if token not in string.punctuation]

remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# Greeting response
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up", "hey")
GREETING_RESPONSES = ["Hi there!", "Hello!", "Hey!", "Hi!", "Greetings!"]

def greet(sentence):
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# Generate response
def generate_response(user_input):
    robo_response = ''
    sent_tokens.append(user_input)

    tfidf_vectorizer = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = tfidf_vectorizer.fit_transform(sent_tokens)

    val = cosine_similarity(tfidf[-1], tfidf[:-1])
    idx = val.argsort()[0][-1]
    flat = val.flatten()
    flat.sort()
    req_tfidf = flat[-1]

    if req_tfidf == 0:
        robo_response += "I'm sorry, I didn't understand that."
    else:
        robo_response += sent_tokens[idx]

    sent_tokens.pop()
    return robo_response

# Chatting loop
def chatbot():
    print("CODTECH NLP Chatbot: Hello! Type 'bye' to exit.")

    while True:
        user_input = input("You: ").lower()

        if user_input in ['bye', 'exit', 'quit']:
            print("CODTECH NLP Chatbot: Goodbye! Have a great day!")
            break
        elif greet(user_input) is not None:
            print("CODTECH NLP Chatbot:", greet(user_input))
        else:
            print("CODTECH NLP Chatbot:", generate_response(user_input))

# Run the chatbot
if __name__ == "__main__":
    chatbot()
